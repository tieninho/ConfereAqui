# -*- coding: utf-8 -*-
"""ConfereAqui.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kqQbfoEPbgGJQMHgHqdIOwkRTl_RwGbd
"""

pip install -q -U google-generativeai

import google.generativeai as genai
from google.colab import files
from PIL import Image
import ipywidgets as widgets
import io
import os

# Configuração do SDK
GOOGLE_API_KEY = "AIzaSyA5oYJp9yMKID2lBqo9gdkIbpX23IIsGhw"
genai.configure(api_key=GOOGLE_API_KEY)

# Lista para armazenar o histórico de respostas
historico_respostas = []

# Contador de respostas
resposta_counter = 0

# Widgets para upload de imagens e inserção de texto
upload_button = widgets.FileUpload(description="Upload de Imagens/Vídeos", multiple=False)
text_input = widgets.Textarea(description="Insira o texto da sua notícia aqui")

# Mensagem de "Gerando resposta..."
gerando_resposta_msg = widgets.Label(value="Gerando resposta...", layout=widgets.Layout(visibility='hidden'))

# Função para lidar com o clique no botão "Verificar Notícia"
def on_verify_button_clicked(b):
    global resposta_counter
    content = None
    if upload_button.value:
        file_contents = next(iter(upload_button.value.values()))['content']
        img = Image.open(io.BytesIO(file_contents))
        content = img
        print("Upload finalizado.")
    elif text_input.value:
        content = text_input.value

    if content:
        # Exibir a mensagem "Gerando resposta..."
        gerando_resposta_msg.layout.visibility = 'visible'

        resposta_counter += 1
        # Gerar o conteúdo com o modelo de visão do Gemini
        model_vision = genai.GenerativeModel('gemini-1.5-pro-latest')
        response = model_vision.generate_content(["Você é um modelo de linguagem projetado para detectar desinformação. Analise o seguinte texto de notícias, forneça uma pontuação de desinformação de 0 a 1, onde 1 é altamente provável de ser desinformação e adicione evidências de apoio.", content], stream=True)

        # Resolver a resposta
        response.resolve()

        # Imprimir o texto gerado pelo modelo com a classificação da resposta
        resposta_texto = f"**Resposta {resposta_counter}:** {response.text}"
        print(resposta_texto)

        # Adicionar a resposta ao histórico
        historico_respostas.append(resposta_texto)

        # Esconder a mensagem "Gerando resposta..."
        gerando_resposta_msg.layout.visibility = 'hidden'

        # Exibir o botão "Gerar Nova Resposta"
        new_response_button.layout.visibility = 'visible'
    else:
        print("Por favor, faça upload de uma imagem/vídeo ou insira o texto da notícia.")

# Botão "Verificar Notícia"
verify_button = widgets.Button(description="Verificar Notícia")
verify_button.on_click(on_verify_button_clicked)

# Função para lidar com o clique no botão "Gerar Nova Resposta"
def on_new_response_button_clicked(b):
    global resposta_counter
    # Limpar campos de upload de imagens e inserção de texto
    upload_button.value.clear()
    text_input.value = ''
    # Esconder o botão "Gerar Nova Resposta"
    new_response_button.layout.visibility = 'hidden'
    # Incrementar o contador de respostas
    resposta_counter += 1

# Botão "Gerar Nova Resposta"
new_response_button = widgets.Button(description="Gerar Nova Resposta")
new_response_button.on_click(on_new_response_button_clicked)
new_response_button.layout.visibility = 'hidden'  # Inicialmente invisível

# Mostrar os widgets
widgets.VBox([widgets.HBox([upload_button, text_input]), verify_button, gerando_resposta_msg, new_response_button])