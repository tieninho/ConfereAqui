import streamlit as st
import google.generativeai as genai
from PIL import Image
import io
import os

# Instru√ß√£o do sistema
system_instruction = "Voc√™ √© um modelo de linguagem projetado para detectar desinforma√ß√£o. Analise o seguinte texto de not√≠cias, forne√ßa uma pontua√ß√£o de desinforma√ß√£o de 0 a 1, onde 1 √© altamente prov√°vel de ser desinforma√ß√£o e adicione evid√™ncias de apoio."

# Configura√ß√£o do SDK com as configura√ß√µes de seguran√ßa
GOOGLE_API_KEY = "AIzaSyA5oYJp9yMKID2lBqo9gdkIbpX23IIsGhw"
genai.configure(api_key=GOOGLE_API_KEY)
safety_settings = {
        "HARASSMENT" : "BLOCK_NONE",
        "HATE" : "BLOCK_NONE",
        "SEXUAL" : "BLOCK_NONE",
        "DANGEROUS" : "BLOCK_NONE",
    }

# Configurando a p√°gina
st.set_page_config(page_title='ConfereAqui', page_icon='üîç', layout='wide')

# Fazendo o display do t√≠tulo da p√°gina
st.title('Confere Aqui üîç')

# Texto de introdu√ß√£o e instru√ß√£o de utiliza√ß√£o
st.markdown("""
    üîç **Bem-vindo ao Confere Aqui!**

    Este √© o seu detector de desinforma√ß√£o, pronto para ajud√°-lo a navegar pelo mar de not√≠cias com confian√ßa. O objetivo √© garantir que voc√™ possa identificar conte√∫dos duvidosos e tomar decis√µes informadas.

    ‚ÑπÔ∏è **Como funciona?**

    Voc√™ pode nos fornecer um texto de not√≠cia ou at√© mesmo fazer o upload de uma imagem relacionada. Nosso sistema analisar√° o conte√∫do, atribuindo uma pontua√ß√£o de desinforma√ß√£o de 0 a 1. Quanto mais pr√≥ximo de 1, maior a probabilidade de ser desinforma√ß√£o.

    ‚ö†Ô∏è **Importante:**

    Lembre-se de que somos um modelo inicial e nossa an√°lise n√£o substitui a verifica√ß√£o em fontes de not√≠cias confi√°veis. Sempre verifique as informa√ß√µes em sites de not√≠cias respeit√°veis antes de tirar conclus√µes.

    ‚úÖ Com o Confere Aqui, voc√™ pode navegar pelas not√≠cias com confian√ßa, sempre pronto para separar os fatos da fic√ß√£o!

""")

# T√≠tulo "Teste Agora:"
st.header("Teste agora:")

# Inicializando o modelo
system_instruction = "Voc√™ √© um modelo de linguagem projetado para detectar desinforma√ß√£o. Analise o seguinte texto de not√≠cias, forne√ßa uma pontua√ß√£o de desinforma√ß√£o de 0 a 1, onde 1 √© altamente prov√°vel de ser desinforma√ß√£o e adicione evid√™ncias de apoio."
model = genai.GenerativeModel(
    model_name="gemini-1.5-pro-latest",
    system_instruction=system_instruction
)

# Inicializa√ß√£o do estado
if "historico_respostas" not in st.session_state:
    st.session_state.historico_respostas = []

if "resposta_counter" not in st.session_state:
    st.session_state.resposta_counter = 0

# Widget para upload de imagens
upload_button = st.file_uploader("Fa√ßa upload de uma imagem" )
text_input = st.text_area("Ou insira o texto da sua not√≠cia aqui", key="texto")

# Mensagem de "Gerando resposta..."
gerando_resposta_msg = st.empty()

# Fun√ß√£o para lidar com o clique no bot√£o "Verificar Not√≠cia"
if st.button("Verificar Not√≠cia"):
    content = None
    if upload_button is not None and text_input:
        st.error("Por favor, selecione apenas um m√©todo de entrada: imagem ou texto.")
    elif upload_button is not None:
        img = Image.open(upload_button)
        content = img
    elif text_input:
        content = text_input

    if content:
        # Exibir a mensagem "Gerando resposta..."
        gerando_resposta_msg.text("Gerando resposta...")

        st.session_state.resposta_counter += 1
        # Gerar o conte√∫do com o modelo de vis√£o do Gemini
        model_vision = genai.GenerativeModel('gemini-1.5-pro-latest')
        response = model_vision.generate_content(["Voc√™ √© um modelo de linguagem projetado para detectar desinforma√ß√£o. Analise o seguinte texto de not√≠cias, forne√ßa uma pontua√ß√£o de desinforma√ß√£o de 0 a 1, onde 1 √© altamente prov√°vel de ser desinforma√ß√£o e adicione evid√™ncias de apoio.", content], stream=True)

        # Resolver a resposta
        response.resolve()
        
        # Imprimir o texto gerado pelo modelo com a classifica√ß√£o da resposta
        resposta_texto = f"**Resposta {st.session_state.resposta_counter}:** {response.text}"

        # Adicionar a resposta ao hist√≥rico
        st.session_state.historico_respostas.append(resposta_texto)

        # Esconder a mensagem "Gerando resposta..."
        gerando_resposta_msg.empty()

# Exibir hist√≥rico de respostas
if st.session_state.historico_respostas:
    st.subheader("Resultado üîç")
    # Iterar sobre o hist√≥rico de respostas de tr√°s para frente
    for resposta in reversed(st.session_state.historico_respostas):
        st.write(resposta)
        st.markdown("---")  # Linha divis√≥ria entre as respostas

# Bot√£o para limpar o upload da imagem e o texto inserido
if st.button("Limpar"):
    st.session_state.texto = ""
